@inherits _BaseView

<MudRTLProvider RightToLeft="@SharedLayoutSettings.IsRTL">
    <MudDialog OnKeyDown="OnKeyDownAsync">
        <DialogContent>
            <MudCard Class="mt-2">
                <MudPaper Elevation="3" Class="" Outlined="true" Square="true">
                    <MudToolBar Dense>
                        <MudText Typo="Typo.button" Color="Color.Primary">
                            @DashboardResource.StringSearch
                        </MudText>
                        <MudSpacer />
                        <MudTooltip Text="@DashboardResource.StringSearch" Color="Color.Tertiary" Arrow>
                            <MudIconButton OnClick="Search" Icon="@Icons.Material.Filled.ManageSearch" Color="Color.Tertiary" />
                        </MudTooltip>
                        <MudTooltip Text="@DashboardResource.StringCancel" Color="Color.Tertiary" Arrow>
                            <MudIconButton OnClick="Close" Icon="@Icons.Material.Filled.Close" Color="Color.Error" />
                        </MudTooltip>
                    </MudToolBar>
                </MudPaper>
                <MudCardContent>
                    <MudGrid>
                        <MudItem md="12">
                            <MudTextField @bind-Value="FilterViewModel.Message" Variant="Variant.Outlined"
                                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.FilterDrama" Clearable
                                          For="@(() => FilterViewModel.Message)"
                                          Label="Message" />
                        </MudItem>
                        <MudItem md="6">
                            <MudDatePicker Label="Log Date From" Clearable
                                           Color="Color.Success" Rounded
                                           For="@(() => FilterViewModel.LogDateFrom)" @bind-Date="FilterViewModel.LogDateFrom"
                                           Culture="@GetCalendarCulture(CultureInfo.DefaultThreadCurrentUICulture.Name)"
                                           Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.EditCalendar"
                                           PickerVariant="PickerVariant.Dialog"
                                           Variant="Variant.Outlined" TitleDateFormat="dddd, dd MMMM" />
                        </MudItem>
                        <MudItem md="6">
                            <MudDatePicker Label="Log Date To" Clearable
                                           Color="Color.Success" Rounded
                                           For="@(() => FilterViewModel.LogDateTo)" @bind-Date="FilterViewModel.LogDateTo"
                                           Culture="@GetCalendarCulture(CultureInfo.DefaultThreadCurrentUICulture.Name)"
                                           Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.EditCalendar"
                                           PickerVariant="PickerVariant.Dialog"
                                           Variant="Variant.Outlined" TitleDateFormat="dddd, dd MMMM" />
                        </MudItem>
                        <MudItem md="12">

                        </MudItem>
                        <MudItem md="12">

                        </MudItem>
                        <MudItem md="12">

                        </MudItem>
                        <MudItem md="12">

                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </DialogContent>
    </MudDialog>
</MudRTLProvider>

@code {

    [CascadingParameter]
    public IMudDialogInstance MudDialog { get; set; }

    private void Close() => MudDialog.Close();

    // *****************************************************

    private async Task Search()
    {
        await Task.Delay(100);

        MudDialog.Close(DialogResult.Ok(FilterViewModel));
    }

    [Parameter]
    public FilterLogViewModel FilterViewModel { get; set; } = new();

    #region - Key Events -

    private async Task OnKeyDownAsync(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "Enter":
            case "NumpadEnter":
                await Search();
                break;
        }
    }

    #endregion

}
