@using Maanfee.Web.Printing;
@implements IDisposable

<style>
    /* Page Size */
    @("@page { size:" + PrintSetting.PageSize + (PrintSetting.IsLandscape == "true" ? " landscape" : "") + " } ")
    /* paper.min.css */
    @("@page{margin:0}body{margin:0}.sheet{margin:0;overflow:hidden;position:relative;box-sizing:border-box;page-break-after:always}body.A3 .sheet{width:297mm;height:419mm}body.A3.landscape .sheet{width:420mm;height:296mm}body.A4 .sheet{width:210mm;height:296mm}body.A4.landscape .sheet{width:297mm;height:209mm}body.A5 .sheet{width:148mm;height:209mm}body.A5.landscape .sheet{width:210mm;height:147mm}body.letter .sheet{width:216mm;height:279mm}body.letter.landscape .sheet{width:280mm;height:215mm}body.legal .sheet{width:216mm;height:356mm}body.legal.landscape .sheet{width:357mm;height:215mm}.sheet.padding-10mm{padding:10mm}.sheet.padding-15mm{padding:15mm}.sheet.padding-20mm{padding:20mm}.sheet.padding-25mm{padding:25mm}@media screen{body{background:#e0e0e0}.sheet{background:#fff;box-shadow:0 .5mm 2mm rgba(0,0,0,.3);margin:5mm auto}}@media print{body.A3.landscape{width:420mm}body.A3,body.A4.landscape{width:297mm}body.A4,body.A5.landscape{width:210mm}body.A5{width:148mm}body.legal,body.letter{width:216mm}body.letter.landscape{width:280mm}body.legal.landscape{width:357mm}}")
    /* site.css　Disable style */
    @("app{position:initial; display:initial;flex-direction:initial}")
    /* Bootstrap.min.css Disable style */
    @("@media print { body { width: 210mm;min-width: auto !important;}}")

    .Page-Border { width:100%;height:100%} /*border:2px solid;*/

</style>

<MudRTLProvider RightToLeft="@SharedLayoutSettings.IsRTL">
	<MudDialog>
		<DialogContent>
			@for (int i = 0; i < int.Parse(PrintSetting.Multiple); i++)
			{
				<div class="@($"sheet ")" style="padding-left:10mm;padding-right:6mm;padding-bottom:10mm;padding-top:10mm;">
					<MudGrid Class="Page-Border">
						<MudItem md="12" xs="12">
							<MudAlert Severity="Severity.Normal">The reactor type is RBMK-1000</MudAlert>
							<MudAlert Severity="Severity.Info">The reactor was fired up successfully</MudAlert>
							<MudAlert Severity="Severity.Success">The reactor is running at optimum temperature</MudAlert>
							<MudAlert Severity="Severity.Warning">The reactor temperature exceeds the optimal range</MudAlert>
							<MudAlert Severity="Severity.Error">Meltdown is imminent</MudAlert>
						</MudItem>
					</MudGrid>
				</div>
			}
		</DialogContent>
	</MudDialog>
</MudRTLProvider>

@code {

	[CascadingParameter]
	public MudDialogInstance MudDialog { get; set; }

	private void Close() => MudDialog.Close();

	// ******************************************

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				PrintSetting.Multiple = "1";
				PrintSetting.PageSize = "A4";
				await PrintingService.PrintAsync(false);
				await Task.Delay(500);
				Close();
			}
			catch (Exception ex)
			{
				Snackbar.Add($"{DashboardResource.StringError} : " + ex.Message, Severity.Error);
			}
		}
	}

	protected override void OnParametersSet()
	{
		PrintingService.AddClassAsync();
	}

	void IDisposable.Dispose()
	{
		PrintingService.RemoveClassAsync();
	}
}
