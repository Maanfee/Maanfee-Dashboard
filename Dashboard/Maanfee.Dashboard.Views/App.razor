@using System.Reflection
@using System.Threading;

<ErrorView>
	<MudDialogProvider />
	<MudSnackbarProvider />
	<Router AppAssembly="@typeof(Program).Assembly"
			AdditionalAssemblies="@LazyLoadedAssemblies" OnNavigateAsync="@OnNavigateAsync">
		<Found Context="routeData">
			<AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(AdminLayout)">
				<NotAuthorized>
					<Maanfee.Dashboard.Views.Pages.Authentications.Login />
				</NotAuthorized>
			</AuthorizeRouteView>
		</Found>
		<NotFound>
			<CascadingAuthenticationState>
				<LayoutView Layout="@typeof(NotFoundLayout)">

				</LayoutView>
			</CascadingAuthenticationState>
		</NotFound>
	</Router>
</ErrorView>

@code {

	private List<Assembly> LazyLoadedAssemblies = new();

	private async Task OnNavigateAsync(NavigationContext args)
	{
		try
		{
			LazyLoadedAssemblies = new()
			{
				typeof(Maanfee.Dashboard.Views.Core.Shared.SharedLayout).Assembly,
				typeof(Maanfee.Dashboard.Examples.Views.Pages._ModulePage).Assembly,
				typeof(Maanfee.Dashboard.Examples.Views.JsInterop.Pages._ModulePage).Assembly,
            };
			LazyLoadedAssemblies.AddRange(LazyLoadedAssemblies);

			await Task.Delay(1);
		}
		catch (Exception ex)
		{
			Snackbar.Add($"{DashboardResource.StringError} : " + ex.Message, Severity.Error);
		}
	}


}

@code {
	private CancellationTokenSource cts = new CancellationTokenSource();

	protected override async Task OnInitializedAsync()
	{
		await ConnectWithRetryAsync(cts.Token);

		LoggingHubConnection.Closed += error =>
				{
					return ConnectWithRetryAsync(cts.Token);
				};
	}

	private async Task<bool> ConnectWithRetryAsync(CancellationToken token)
	{
		while (true)
		{
			try
			{
				await LoggingHubConnection.StartAsync(token);
				return true;
			}
			catch when (token.IsCancellationRequested)
			{
				return false;
			}
			catch
			{
				await Task.Delay(5000);
			}
		}
	}

	public async ValueTask DisposeAsync()
	{
		cts.Cancel();
		cts.Dispose();
		await LoggingHubConnection.DisposeAsync();
	}
}