@inherits _BaseView

<MudRTLProvider RightToLeft="@SharedLayoutSettings.IsRTL">
    <MudDialog>
        <DialogContent>
            @if (!IsLoaded)
            {
                <FormOverlay />
            }
            else
            {
                <MudCard Class="mt-2">
                    <MudPaper Elevation="3" Class="" Outlined="true" Square="true">
                        <MudToolBar Dense>
                            <MudText Typo="Typo.button" Color="Color.Primary">
                                @DashboardResource.StringRelease
                            </MudText>
                            <MudSpacer />
                            <MudTooltip Text="@DashboardResource.StringCancel" Color="Color.Tertiary" Arrow>
                                <MudIconButton OnClick="Close" Icon="@Icons.Material.Filled.Close" Color="Color.Error" />
                            </MudTooltip>
                        </MudToolBar>
                    </MudPaper>
                    <MudDivider DividerType="DividerType.FullWidth" />
                    <MudCardContent>
                        <MudGrid>
                            <MudItem md="4">
                                <MudField Disabled="true" Label="@DashboardResource.StringVersion" Variant="Variant.Outlined">
                                    @Model.Version
                                </MudField>
                            </MudItem>
                            <MudItem md="4">
                                <MudField Disabled="true" Label="@DashboardResource.StringDate" Variant="Variant.Outlined">
                                    @Model.ReleaseDate.ToDateString()
                                </MudField>
                            </MudItem>
                            <MudItem md="4" Class="my-3">
                                <MudCheckBox Disabled="true" @bind-Value="Model.IsActive" Label="@DashboardResource.StringIsActive"
                                             Color="Color.Primary"></MudCheckBox>
                            </MudItem>
                            <MudItem md="12">
                                <MudTable Items="@Model.SysReleaseFeatures" FixedHeader FixedFooter Dense Height="350px"
                                          Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                                    <HeaderContent>
                                        <MudTh><MudTableSortLabel SortBy="new Func<SysReleaseFeature, object>(x=>x.Comment)">@DashboardResource.StringComment</MudTableSortLabel></MudTh>
                                        <MudTh><MudTableSortLabel SortBy="new Func<SysReleaseFeature, object>(x=>x.SysReleaseType.Title)">@DashboardResource.StringTitle</MudTableSortLabel></MudTh>
                                        <MudTh><MudTableSortLabel SortBy="new Func<SysReleaseFeature, object>(x=>x.FeatureDate)">@DashboardResource.StringDate</MudTableSortLabel></MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd>@context.Comment</MudTd>
                                        <MudTd>@context.SysReleaseType.Title</MudTd>
                                        <MudTd>@context.FeatureDate.ToDateString() - @context.FeatureDate.ToTimeString()</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            }
        </DialogContent>
    </MudDialog>
</MudRTLProvider>

@code {

    [CascadingParameter]
    public IMudDialogInstance MudDialog { get; set; }

    private void Close() => MudDialog.Close();

    // *****************************************************

    [Parameter]
    public string Id { get; set; }

    private SysRelease Model = new();

    protected override async Task OnInitializedAsync()
    {
        IsLoaded = false;

        try
        {
            var Callback = await Http.GetFromJsonAsync<CallbackResult<SysRelease>>($"api/SysReleases/Details/{Id}");

            if (Callback.Data != null)
            {
                Model = Callback.Data;
            }
            else
            {
                Snackbar.Add(Callback.Error.ToString(), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{DashboardResource.StringError} : " + ex.Message, Severity.Error);
        }

        IsLoaded = true;
    }

} 