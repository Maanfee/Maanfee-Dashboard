@namespace Maanfee.Dashboard.Views.Core

<style>

    .go-corner {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
        position: absolute;
        top: 0px;
        right: 0px;
        overflow: hidden;
        border-radius: 0 4px 0 32px;
        background-color: #00838d;
    }

    .go-arrow {
        margin-top: -4px;
        margin-right: -4px;
        color: white;
        font-family: courier, sans;
    }

    .Type1 {
        display: block;
        position: relative;
        background-color: #f2f8f9;
        text-decoration: none;
        z-index: 0;
        overflow: hidden;
    }

        .Type1:before {
            content: "";
            position: absolute;
            z-index: 1;
            top: -16px;
            right: -16px;
            background: #00838d;
            height: 32px;
            width: 32px;
            border-radius: 32px;
            transform: scale(1);
            transform-origin: 50% 50%;
            transition: transform 0.25s ease-out;
            opacity: 1;
        }

        .Type1:hover:before {
            transform: scale(21);
        }

        .Type1:hover hr {
            transition: all 0.3s ease-out;
            color: rgba(255, 255, 255, 0.5);
        }

        .Type1:hover span {
            transition: all 0.3s ease-out;
            color: #fff;
        }

    /* **************************************************** */

    .Type2 {
        display: block;
        position: relative;
        max-width: 262px;
        background-color: #fff;
        text-decoration: none;
        overflow: hidden;
    }

        .Type2 .go-corner {
            background-color: #00838d;
            height: 100%;
            width: 20px;
            padding-right: 9px;
            border-radius: 0;
            transform: skew(6deg);
            margin-right: -36px;
            align-items: start;
            z-index: 5;
            background-image: linear-gradient(-45deg, #8f479a 1%, #dc2a74 100%);
        }

        .Type2 .go-arrow {
            transform: skew(-6deg);
            margin-left: -2px;
            margin-top: 9px;
            opacity: 0;
        }

        .Type2:hover {
            border: 1px solid #cd3d73;
        }

        .Type2 h3 {
            margin-top: 8px;
        }

        .Type2:hover .go-corner {
            margin-right: -12px;
        }

        .Type2:hover .go-arrow {
            opacity: 1;
        }

</style>

<a href="@Link" class="mud-elevation-1 mud-card rounded-lg align-center @Type">
    @if (HoverTypo == HoverType.Type1 || HoverTypo == HoverType.Type2)
    {
        <MudText Class="go-corner" Align="Align.End">
            <div class="go-arrow" style="z-index:5">
                →
            </div>
        </MudText>
    }
    <MudCardContent>
        <MudPaper Elevation="0" Class="pa-8">
            <div class="d-flex justify-center align-center relative pa-8 mud-height-full mud-width-full" style="z-index:5">
                @ChildContent
            </div>
        </MudPaper>
        <MudDivider DividerType="DividerType.FullWidth" Class="relative" style="z-index:5 !important;" />
        @if (!string.IsNullOrEmpty(Title))
        {
            <div class="pt-2">
                <MudText Align="Align.Start" Typo="Typo.caption" Class="relative" style="z-index:5 !important;">@Title</MudText>
            </div>
        }
    </MudCardContent>
</a>

@code {

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Link { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public HoverType HoverTypo { get; set; }

    public enum HoverType
    {
        Type1,
        Type2,
        Type3,
        Type4,
    }

    private string Type = "Type1";

    protected override void OnInitialized()
    {
        switch (HoverTypo)
        {
            case HoverType.Type1:
                Type = "Type1";
                break;
            case HoverType.Type2:
                Type = "Type2";
                break;
            case HoverType.Type3:
                Type = "Type3";
                break;
            case HoverType.Type4:
                Type = "Type4";
                break;
        }
    }
}