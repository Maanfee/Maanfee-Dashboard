@inherits _BaseView

<MudRTLProvider RightToLeft="@SharedLayoutSettings.IsRTL">
    <MudDialog>
        <DialogContent>
            @if (!IsLoaded)
            {
                <FormOverlay />
            }
            else
            {
                <MudCard Class="mt-2">
                    <MudCardHeader>
                        <MudText Typo="Typo.button" Color="Color.Primary">
                            @DashboardResource.StringRole
                        </MudText>
                    </MudCardHeader>
                    <MudDivider DividerType="DividerType.FullWidth" />
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" sm="6" md="6">
                                <MudField Disabled="true" Label="@DashboardResource.StringRole" Variant="Variant.Outlined">
                                    @Model.Name
                                </MudField>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="6">
                                <MudField Disabled="true" Label="@DashboardResource.StringNormalizedName" Variant="Variant.Outlined">
                                    @Model.NormalizedName
                                </MudField>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
                <MudPaper Class="pa-3 my-2 ActionColor" Elevation="3" Outlined="true" Square="true">
                    <MudStack Spacing="1" Row="true">
                        <MudButton OnClick="Close" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FreeCancellation" IconColor="Color.Surface">@DashboardResource.StringCancel</MudButton>
                    </MudStack>
                </MudPaper>
            }
        </DialogContent>
    </MudDialog>
</MudRTLProvider>

@code {

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }

    private void Close() => MudDialog.Close();

    // *****************************************************

    [Parameter]
    public string Id { get; set; }

    private IdentityRole Model = new();

    protected override async Task OnInitializedAsync()
    {
        IsLoaded = false;

        try
        {
            var Callback = await Http.GetFromJsonAsync<CallbackResult<IdentityRole>>($"api/Roles/Details/{Id}");

            if (Callback.Data != null)
            {
                Model = Callback.Data;
            }
            else
            {
                Snackbar.Add(Callback.Error.ToString(), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{DashboardResource.StringError} : " + ex.Message, Severity.Error);
        }

        IsLoaded = true;
    }

}