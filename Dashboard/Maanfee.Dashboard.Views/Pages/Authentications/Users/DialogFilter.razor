
<MudRTLProvider RightToLeft="@SharedLayoutSettings.IsRTL">
	<MudDialog>
		<DialogContent>
			<MudGrid>
                <MudItem md="6">
                    <MudTextField @bind-Value="FilterViewModel.Name" Variant="Variant.Outlined"
                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Title" Clearable
                                  For="@(() => FilterViewModel.Name)"
                                  Label="@DashboardResource.StringName" />
                </MudItem>
                <MudItem md="6">

                </MudItem>
				<MudItem md="6">
					<MudAutocomplete T="DropDownDepartmentViewModel" Label="@DashboardResource.StringDepartment"
									 ResetValueOnEmptyText="true" Clearable MaxItems="null" Variant="Variant.Outlined"
									 For="@(() => FilterViewModel.Department)"
									 ShowProgressIndicator="true" @bind-Value="FilterViewModel.Department"
									 SearchFunc="GetDepartmentsAsync" ToStringFunc="@(e=> e==null?null : $"{e.Title}")" />
				</MudItem>
			</MudGrid>
			<MudPaper Class="pa-3 my-2 ActionColor" Elevation="3" Outlined="true" Square="true">
				<MudStack Spacing="1" Row="true">
					<MudButton OnClick="Search" Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ManageSearch" IconColor="Color.Surface">@DashboardResource.StringSearch</MudButton>
					<MudButton OnClick="Close" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FreeCancellation" IconColor="Color.Surface">@DashboardResource.StringCancel</MudButton>
				</MudStack>
			</MudPaper>
		</DialogContent>
	</MudDialog>
</MudRTLProvider>

@code {

	[CascadingParameter]
	public MudDialogInstance MudDialog { get; set; }

	private void Close() => MudDialog.Close();

	// *****************************************************

	private async Task Search()
	{
		await Task.Delay(100);

		MudDialog.Close(DialogResult.Ok(FilterViewModel));
	}

	[Parameter]
	public FilterUserViewModel FilterViewModel { get; set; } = new();

    #region - Combobox -

	protected async Task<IEnumerable<DropDownDepartmentViewModel>> GetDepartmentsAsync(string value, CancellationToken token)
    {
        List<DropDownDepartmentViewModel> Parents = new();
        var Callback = await Http.GetFromJsonAsync<CallbackResult<List<DropDownDepartmentViewModel>>>($"api/Departments/GetDropDownDepartments?value={value}", token);
        if (Callback.Data != null)
        {
            Parents = Callback.Data;
        }
        else
        {
            Snackbar.Add(Callback.Error.ToString(), Severity.Error);
        }
        return Parents;
    }

    #endregion

}
