@implements IDisposable

<MudGrid>
    <MudItem md="4">
        <MudButton OnClick="Set" Variant="Variant.Filled" StartIcon="@Icons.Custom.Uncategorized.Radioactive" Color="Color.Warning">Set Random Key</MudButton>
    </MudItem>
    <MudItem md="4">
        <MudButton OnClick="Get" Variant="Variant.Filled" StartIcon="@Icons.Custom.Uncategorized.Radioactive" Color="Color.Error">Get Random Key Value</MudButton>
    </MudItem>
    <MudItem md="12">
        @Result
    </MudItem>
</MudGrid>

@code {

    private int Result;

    private string Key = "RandomKey";

    private async Task Set()
    {
        try
        {
            await LocalStorage.SetAsync(Key, new Random().Next(1, 100));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{DashboardResource.StringError} : {ex.ToString()}", Severity.Error);
        }
    }

    private async Task Get()
    {
        try
        {
            Result = await LocalStorage.GetAsync<int>(Key);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{DashboardResource.StringError} : {ex.ToString()}", Severity.Error);
        }
    }

    public async void Dispose() => await Dom.DisposeAsync();
}